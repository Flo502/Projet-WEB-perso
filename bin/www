#!/usr/bin/env node
 // Module dependencies.
var app = require('../app');
var debug = require('debug')('RandomFest:server');
var http = require('http');
var mongoose = require('mongoose');

mongoose.connect('mongodb://localhost/RandomFest');
var db = mongoose.connection;
db.once('open', Main);

var Ticket = require('../models/ticket');
var Product = require('../models/product');

var myProducts = require('../product');

async function Main() {
  Ticket.remove({}, function(err) {
    if (err) {
      console.log(err);
      return;
    }

    for (var i = 0; i < 10; i++) {
      /*new Ticket({
        date: '08.01.18'
      }).save(function(err) {
        if (err) console.log(err);
      });*/
      new Ticket({
        date: '08.02.18'
      }).save(function(err) {
        if (err) console.log(err);
      });
      new Ticket({
        date: '08.03.18'
      }).save(function(err) {
        if (err) console.log(err);
      });
    }

  });

  await Product.remove({}).exec();
  Product.insertMany(myProducts, function(err, docs) {
    if (err) console.log(err);
    else console.log('Base de donnée MAJ')
    Product.findOneAndUpdate({ title: "Pass J1J2" }, 
    {$push: {dates: {$each: ['2018-07-31T22:00:00.000Z', '2018-08-01T22:00:00.000Z']}}}).exec().then(function (doc, err) {
		if (err) console.log(err);
	});
	Product.findOneAndUpdate({ title: "Pass J2J3" }, 
    {$push: {dates: {$each: ['2018-08-01T22:00:00.000Z', '2018-08-02T22:00:00.000Z']}}}).exec().then(function (doc, err) {
		if (err) console.log(err);
	});
	Product.findOneAndUpdate({ title: "Pass J1J3" }, 
    {$push: {dates: {$each: ['2018-07-31T22:00:00.000Z', '2018-08-02T22:00:00.000Z']}}}).exec().then(function (doc, err) {
		if (err) console.log(err);
	});
	Product.findOneAndUpdate({ title: "Pass 3 jours" }, 
    {$push: {dates: {$each: ['2018-07-31T22:00:00.000Z', '2018-08-01T22:00:00.000Z', '2018-08-02T22:00:00.000Z']}}}).exec().then(function (doc, err) {
		if (err) console.log(err);
	});
  });
}

// Get port from environment and store in Express.
var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

// Create HTTP server.
var server = http.createServer(app);

// Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
console.log('Serveur lancé');
// Normalize a port into a number, string, or false.
function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) {
    return val; // named pipe
  }
  if (port >= 0) {
    return port; // port number
  }
  return false;
}

// Event listener for HTTP server "error" event.
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Event listener for HTTP server "listening" event.
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}
